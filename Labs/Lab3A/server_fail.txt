// spent a lot of time but failed unfortunately XD
// didn't know what happened
package kvraft

import (
	"../labgob"
	"../labrpc"
	"../raft"
	"sync"
	"sync/atomic"
	"fmt"
	"time"
)

const Debug = 1

func DPrintf(format string, a ...interface{}) (n int, err error) {
	if Debug > 0 {
		fmt.Printf(format, a...)
	}
	return
}


type Op struct {
	// Your definitions here.
	// Field names must start with capital letters,
	// otherwise RPC will break.
	Id	int64
	Ver int64
	Key string
	Val	string
	Op 	string
}

type cond struct {
	sync.Mutex
	cond *sync.Cond
}

type ck struct {
	idx int64
	ver int64
	records []interface{}
	mu	sync.Mutex
}

func newCond() *cond {
	c := cond{}
	c.cond = sync.NewCond(&c)
	return &c
}

type KVServer struct {
	mu      sync.Mutex
	me      int
	rf      *raft.Raft
	applyCh chan raft.ApplyMsg
	dead    int32 // set by Kill()

	maxraftstate int // snapshot if log grows this big

	// Your definitions here.
	m 		map[string]string
	lastcommit	int // last commit index
	conds	[]*cond // condition variables
	cks		[]ck	// clerks
	ckId2Idx	map[int64]int // clerk Id to Index in clerks array
	cksMu	sync.Mutex // mutex for clerks
}

func (kv *KVServer) extendconds(idx int) {
	kv.mu.Lock()
	defer kv.mu.Unlock()
	for len(kv.conds) <= idx {
		kv.conds = append(kv.conds, newCond())
	}
}

func (kv *KVServer) alarmclock(idx int) {
	// fmt.Printf("\033[1;31m%v: alarmclock %v\033[0m\n", kv.me, idx)
	time.Sleep(ALARM * time.Millisecond)
	kv.conds[idx].cond.Broadcast()
}

func (kv *KVServer) wait(idx int) {
	kv.extendconds(idx)
	kv.conds[idx].Lock()
	go kv.alarmclock(idx)
	kv.conds[idx].cond.Wait()
	kv.conds[idx].Unlock()
	// fmt.Printf("\033[1;31m%v: wakeup %v %v\033[0m\n", kv.me, idx, *success)
}

func (kv *KVServer) wakeup(idx int) {
	kv.extendconds(idx)
	kv.conds[idx].cond.Broadcast()
}

// update the ck committed records
func (kv *KVServer) updateCkRecords(id int64, ver int64, reply interface{}) {
	idx := kv.ckId2Idx[id]
	ck := &kv.cks[idx]
	fmt.Printf("Server %v: id: %v, ver: %v, ck.ver: %v\n", kv.me, ck.idx, ver, ck.ver)
	if ver != ck.ver + 1 {
		fmt.Printf("version number not continuous: %v %v\n", ver, ck.ver + 1)
		panic("kv.updateCkRecords")
	}
	ck.ver++
	ck.records = append(ck.records, reply)
}

// if the ck does not exist, create it
// if exist, check if the records are continuous, if not, return an Error
// to let client wait
func (kv *KVServer) checkContinuity(id int64, ver int64) bool {
	kv.cksMu.Lock()
	defer kv.cksMu.Unlock()
	idx, ok := kv.ckId2Idx[id]
	if !ok {
		var ai []interface{}
		ai = append(ai, -1)
		nCks := len(kv.cks)
		kv.cks = append(kv.cks, ck{id, 0, ai, sync.Mutex{}})
		kv.ckId2Idx[id] = nCks
		return true
	}
	ck := &kv.cks[idx]
	res := ver <= ck.ver + 1
	return res
}

// check check if the version of the opration is executed
// if exist, return it
func (kv *KVServer) checkSubmitted(id int64, ver int64) (interface{}, bool) {
	kv.cksMu.Lock()
	defer kv.cksMu.Unlock()
	idx := kv.ckId2Idx[id]
	ck := &kv.cks[idx]
	if ck.ver >= ver {
		fmt.Printf("%v: Loading\n", kv.me)
		return ck.records[ck.ver], true
	}
	return 1, false
}

func (kv *KVServer) submit(cmd Op) int {
	lastcommit := kv.lastcommit
	idx, _, isLeader := kv.rf.Start(cmd)
	if !isLeader {
		return 0
	}
	if idx <= lastcommit {
		panic("kv.submit: outdated commitindex")
	}
	return idx
}

func (kv *KVServer) Get(args *GetArgs, reply *GetReply) {
	// Your code here.
	_, isLeader := kv.rf.GetState()
	if !isLeader {
		reply.Err = ErrWrongLeader
		return
	}
	if !kv.checkContinuity(args.Id, args.Ver) {
		reply.Err = ErrNoContinuity
		return
	}
	fmt.Printf("Server %v: Get\n", kv.me)
	ck := &kv.cks[kv.ckId2Idx[args.Id]]
	ck.mu.Lock()
	defer ck.mu.Unlock()
	oldReply, isSubmitted := kv.checkSubmitted(args.Id, args.Ver)
	if isSubmitted {
		reply.Err = oldReply.(*GetReply).Err
		reply.Value = oldReply.(*GetReply).Value
		fmt.Printf("Server %v: return submitted: %v %v\n", kv.me, args, reply)
		return
	}
	cmd := Op{args.Id, args.Ver, args.Key, "", "Get"}
	fmt.Printf("Server %v: retry\n", kv.me)
	idx := kv.submit(cmd)
	if idx == 0 {
		reply.Err = ErrWrongLeader
		return
	}
	kv.wait(idx)
	success := idx <= kv.lastcommit
	if !success {
		reply.Err = ErrNoContinuity
		return
	}
	v, ok := kv.m[args.Key]
	if !ok {
		reply.Err = ErrNoKey
	} else {
		reply.Value = v
	}
	kv.updateCkRecords(args.Id, args.Ver, reply)
}

func (kv *KVServer) PutAppend(args *PutAppendArgs, reply *PutAppendReply) {
	// Your code here.
	_, isLeader := kv.rf.GetState()
	if !isLeader {
		reply.Err = ErrWrongLeader
		return
	}
	if !kv.checkContinuity(args.Id, args.Ver) {
		reply.Err = ErrNoContinuity
		return
	}
	ck := &kv.cks[kv.ckId2Idx[args.Id]]
	ck.mu.Lock()
	defer ck.mu.Unlock()
	_, isSubmitted := kv.checkSubmitted(args.Id, args.Ver)
	if isSubmitted {
		// if replied, it must have succeeded
		return
	}
	cmd := Op{args.Id, args.Ver, args.Key, args.Value, args.Op}
	idx := kv.submit(cmd)
	if idx == 0 {
		reply.Err = ErrWrongLeader
		return
	}
	kv.wait(idx)
	success := idx <= kv.lastcommit
	if !success {
		reply.Err = ErrNoContinuity
		return
	}
	kv.updateCkRecords(args.Id, args.Ver, reply)
}

//
// the tester calls Kill() when a KVServer instance won't
// be needed again. for your convenience, we supply
// code to set rf.dead (without needing a lock),
// and a killed() method to test rf.dead in
// long-running loops. you can also add your own
// code to Kill(). you're not required to do anything
// about this, but it may be convenient (for example)
// to suppress debug output from a Kill()ed instance.
//
func (kv *KVServer) Kill() {
	atomic.StoreInt32(&kv.dead, 1)
	kv.rf.Kill()
	// Your code here, if desired.
}

func (kv *KVServer) killed() bool {
	z := atomic.LoadInt32(&kv.dead)
	return z == 1
}

func (kv *KVServer) msgHandler(applyCh chan raft.ApplyMsg) {
	for m := range applyCh {
		idx := m.CommandIndex
		if m.CommandValid == false {
			// ignore other types of ApplyMsg
		} else if idx <= kv.lastcommit {
			// pass
		} else if idx > kv.lastcommit + 1 {
			panic("kv.msgHandler: non-continuous commit")
		} else {
			op := m.Command.(Op)
			fmt.Printf(
				// "%v: committed %v at index %v\n",
				"\033[1;35m%v: committed %v at index %v\033[0m\n",
				kv.me, m.Command, m.CommandIndex,
			)
			if op.Op == PUT {
				kv.m[op.Key] = op.Val
			} else if op.Op == APPEND {
				kv.m[op.Key] += op.Val
			}
			kv.lastcommit++
			kv.wakeup(idx)
		}
	}
}

//
// servers[] contains the ports of the set of
// servers that will cooperate via Raft to
// form the fault-tolerant key/value service.
// me is the index of the current server in servers[].
// the k/v server should store snapshots through the underlying Raft
// implementation, which should call persister.SaveStateAndSnapshot() to
// atomically save the Raft state along with the snapshot.
// the k/v server should snapshot when Raft's saved state exceeds maxraftstate bytes,
// in order to allow Raft to garbage-collect its log. if maxraftstate is -1,
// you don't need to snapshot.
// StartKVServer() must return quickly, so it should start goroutines
// for any long-running work.
//
func StartKVServer(servers []*labrpc.ClientEnd, me int, persister *raft.Persister, maxraftstate int) *KVServer {
	// call labgob.Register on structures you want
	// Go's RPC library to marshall/unmarshall.
	labgob.Register(Op{})

	kv := new(KVServer)
	kv.me = me
	kv.maxraftstate = maxraftstate

	// You may need initialization code here.

	kv.conds = []*cond{newCond()}
	kv.m = make(map[string]string)
	kv.ckId2Idx = make(map[int64]int)
	kv.applyCh = make(chan raft.ApplyMsg)
	go kv.msgHandler(kv.applyCh)
	kv.rf = raft.Make(servers, me, persister, kv.applyCh)

	// You may need initialization code here.

	return kv
}
